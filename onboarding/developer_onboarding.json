{
  "architecture_overview": {
    "description": "This project consists of several interconnected modules that work together to create a complete video translation workflow.",
    "project_info": {
      "main_entry_point": "src/videodub/core/pipeline.py",
      "cli_command": "python examples/quick_test.py",
      "package_manager": "poetry",
      "python_version": "3.8+"
    },
    "dependencies": {
      "external_tools": ["ffmpeg", "yt-dlp"],
      "api_keys_required": ["OPENAI_API_KEY"],
      "api_keys_optional": ["GOOGLE_APPLICATION_CREDENTIALS", "AZURE_SPEECH_KEY"]
    },
    "development": {
      "current_issues": [],
      "test_command": "make test",
      "lint_command": "make lint",
      "format_command": "make format",
      "install_command": "poetry install"
    },
    "key_files": {
      "main_pipeline": "src/videodub/core/pipeline.py",
      "configuration": "src/videodub/config/settings.py",
      "models": "src/videodub/core/models.py",
      "interfaces": "src/videodub/core/interfaces.py"
    },
    "documentation": {
      "architecture_decisions": {
        "location": "docs/adr/",
        "index": "docs/adr/README.md",
        "description": "Architecture Decision Records documenting key design decisions and their rationale",
        "key_adrs": [
          {
            "adr": "0001",
            "title": "Pipeline Architecture Design",
            "status": "Accepted",
            "relevance": "Core system architecture"
          },
          {
            "adr": "0002", 
            "title": "Real-Time Cost Tracking Integration",
            "status": "Accepted",
            "relevance": "Cost monitoring and analytics"
          },
          {
            "adr": "0003",
            "title": "Transcript Processing Service Redesign", 
            "status": "Superseded by ADR-0005",
            "relevance": "Step 2 implementation approach"
          },
          {
            "adr": "0004",
            "title": "Pipeline Step Evaluation Framework",
            "status": "Proposed",
            "relevance": "Quality evaluation and human assessment system"
          },
          {
            "adr": "0005",
            "title": "Pipeline Step Separation and Responsibility Alignment",
            "status": "In Progress - Phase 2 Complete",
            "relevance": "Fundamental pipeline architecture redesign"
          }
        ]
      },
      "evaluation_framework": {
        "location": "evaluation/",
        "implementation_guide": "evaluation/README.md",
        "description": "Pipeline step evaluation framework for quality assessment and human review",
        "status": "Phase 1 Complete",
        "usage": "poetry run python3 evaluation/scripts/run_evaluation.py --help",
        "implemented_steps": ["transcript_processing"],
        "planned_steps": ["translation", "tts", "audio_processing"],
        "key_features": [
          "Human-readable before/after comparisons",
          "Configuration A/B testing",
          "Quality scoring and metrics",
          "Automated report generation",
          "Real service integration"
        ]
      }
    },
    "current_refactoring": {
      "status": "In Progress - ADR 0005 Implementation",
      "description": "Implementing pipeline step separation and responsibility alignment",
      "completed_phases": [
        {
          "phase": 1,
          "name": "Data Extraction Service Implementation",
          "status": "Complete",
          "deliverables": [
            "DataExtractionService interface (src/videodub/core/interfaces.py)",
            "YouTubeDataExtractionService implementation (src/videodub/services/data_extraction.py)",
            "TimedTranscript, TimingMetadata, SourceType models (src/videodub/core/models.py)",
            "DataExtractionError exception (src/videodub/core/exceptions.py)",
            "Comprehensive test suite (tests/unit/test_data_extraction.py)"
          ]
        },
        {
          "phase": 2,
          "name": "Translation Service Refactoring",
          "status": "Complete",
          "deliverables": [
            "Refactored TranslationService interface to pure text-to-text (src/videodub/core/interfaces.py)",
            "Updated OpenAITranslationService implementation (src/videodub/services/translator.py)",
            "Updated FallbackTranslationService implementation (src/videodub/services/translator.py)",
            "Removed all timing logic and segment-based methods",
            "Comprehensive test suite (tests/unit/test_translation_service.py)",
            "18 tests covering all functionality, edge cases, and interface compliance"
          ],
          "key_changes": [
            "translate_text(text: str, target_language: str) -> str",
            "translate_batch(texts: list[str], target_language: str) -> list[str]",
            "Removed translate_segments() and segment-based translate_batch()",
            "Clean separation: List[str] → TranslationService → List[str]"
          ]
        }
      ],
      "remaining_phases": [
        {
          "phase": 3,
          "name": "Alignment Service Creation",
          "description": "Create AlignmentService for timing synchronization",
          "status": "Pending"
        },
        {
          "phase": 4,
          "name": "Integration Testing",
          "description": "Integration testing and performance optimization",
          "status": "Pending"
        },
        {
          "phase": 5,
          "name": "Migration",
          "description": "Migration of existing workflows",
          "status": "Pending"
        }
      ],
      "key_design_changes": {
        "old_pipeline": "video → transcription → translation → tts → audio → video",
        "new_pipeline": "video → data_extraction → translation → alignment → tts → audio → video",
        "rationale": "Clean separation between data extraction, translation, and timing alignment"
      }
    },
    "flow": [
      {
        "step": 1,
        "name": "Data Extraction",
        "component": "DataExtractionService",
        "file_path": "src/videodub/services/data_extraction.py",
        "implementation": "YouTubeDataExtractionService",
        "input": ["Video URL"],
        "output": ["TimedTranscript"],
        "description": "Extracts transcript and timing metadata from video sources (YouTube API, future: speech-to-text)",
        "status": "Implemented - Phase 1 Complete",
        "models": ["TimedTranscript", "TimingMetadata", "SourceType"],
        "features": ["Quality scoring", "Timing accuracy analysis", "Source type detection"]
      },
      {
        "step": 1.5,
        "name": "Video Scraping (Legacy)",
        "component": "VideoScrapingService",
        "file_path": "src/videodub/services/scraper.py",
        "implementation": "YouTubeScrapingService",
        "input": ["Video URL"],
        "output": ["VideoMetadata", "TranscriptSegments"],
        "description": "Downloads video, extracts metadata and transcript using video_scraper package",
        "status": "Legacy - Being replaced by DataExtractionService",
        "common_errors": ["Video not found", "No transcript available", "video_scraper package missing"]
      },
      {
        "step": 2,
        "name": "Translation",
        "component": "TranslationService",
        "file_path": "src/videodub/services/translator.py",
        "implementation": "OpenAITranslationService",
        "input": ["List[str]"],
        "output": ["List[str]"],
        "description": "Pure text-to-text translation using OpenAI GPT models",
        "status": "Implemented - Phase 2 Complete",
        "models_supported": ["gpt-3.5-turbo", "gpt-4", "gpt-4-turbo", "gpt-4.1-nano"],
        "interface_methods": ["translate_text()", "translate_batch()"],
        "features": ["Concurrent batch processing", "Error handling with fallbacks", "Language validation", "Both OpenAI and Fallback implementations"]
      },
      {
        "step": 3,
        "name": "Alignment",
        "component": "AlignmentService",
        "file_path": "src/videodub/services/alignment.py",
        "implementation": "TimingAlignmentService",
        "input": ["TimedTranscript", "TranslatedText"],
        "output": ["TimedTranslation"],
        "description": "Synchronizes translated text with original speech timing metadata",
        "status": "Not Implemented - Phase 3 Pending",
        "features": [
          "Timing preservation logic",
          "Segment length adjustments",
          "Quality scoring for alignment accuracy"
        ]
      },
      {
        "step": 3.5,
        "name": "Transcript Processing (Legacy)",
        "component": "TranscriptProcessingService",
        "file_path": "src/videodub/services/transcript.py",
        "implementation": "HybridTranscriptProcessingService",
        "input": ["TranscriptSegments"],
        "output": ["ProcessedSegments"],
        "description": "Hybrid processing with rule-based preprocessing and optional AI enhancement for optimal translation quality",
        "status": "Legacy - Logic being redistributed to Alignment step",
        "processing_modes": ["RULE_BASED", "AI_ENHANCED", "HYBRID"],
        "features": [
          "Sequence tracking for deterministic ordering",
          "Intelligent segment merging with quality thresholds",
          "Context-aware sentence reconstruction",
          "Parallel processing support",
          "Configurable cost vs quality trade-offs"
        ]
      },
      {
        "step": 4,
        "name": "Text-to-Speech",
        "component": "TTSService",
        "file_path": "src/videodub/services/tts.py",
        "implementation": "OpenAITTSService",
        "input": ["TimedTranslation", "TargetLanguage"],
        "output": ["AudioFiles"],
        "description": "Generates natural-sounding audio from aligned translated segments using OpenAI TTS or other engines",
        "engines_supported": ["OpenAI", "Google", "Azure", "System"]
      },
      {
        "step": 5,
        "name": "Audio Processing",
        "component": "AudioProcessingService",
        "file_path": "src/videodub/services/audio.py",
        "implementation": "FFmpegAudioProcessingService",
        "input": ["AudioFiles", "TimedTranslation"],
        "output": ["CombinedAudioFile"],
        "description": "Combines individual audio segments into a single synchronized audio track"
      },
      {
        "step": 6,
        "name": "Video Dubbing",
        "component": "VideoProcessingService",
        "file_path": "src/videodub/services/video.py",
        "implementation": "FFmpegVideoProcessingService",
        "input": ["OriginalVideo", "CombinedAudioFile"],
        "output": ["DubbedVideo"],
        "description": "Creates final dubbed video by replacing original audio with translated audio using FFmpeg",
        "dependencies": ["ffmpeg"]
      },
      {
        "step": 7,
        "name": "Storage & Result",
        "component": "StorageService",
        "file_path": "src/videodub/services/storage.py",
        "implementation": "StorageService",
        "input": ["VideoMetadata", "TimedTranslation", "AudioFiles", "DubbedVideo"],
        "output": ["ProcessingResult"],
        "description": "Saves all pipeline outputs and generates processing result with file paths"
      }
    ],
    "side_processes": [
      {
        "name": "Cost Tracking & Analytics",
        "file_path": "src/videodub/utils/cost_tracking.py",
        "implementation": "CostTracker",
        "triggered_after": "Translation",
        "monitored_steps": [
          "Translation API calls (OpenAI GPT)",
          "Text-to-Speech API calls",
          "Token usage tracking",
          "Character usage tracking",
          "Real-time cost calculation"
        ]
      }
    ]
  }
}