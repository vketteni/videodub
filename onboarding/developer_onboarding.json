{
  "architecture_overview": {
    "description": "This project consists of several interconnected modules that work together to create a complete video translation workflow.",
    "project_info": {
      "main_entry_point": "src/videodub/core/pipeline.py",
      "cli_command": "python examples/quick_test.py",
      "package_manager": "poetry",
      "python_version": "3.8+"
    },
    "dependencies": {
      "external_tools": ["ffmpeg", "yt-dlp"],
      "api_keys_required": ["OPENAI_API_KEY"],
      "api_keys_optional": ["GOOGLE_APPLICATION_CREDENTIALS", "AZURE_SPEECH_KEY"]
    },
    "development": {
      "current_issues": [],
      "test_command": "make test",
      "lint_command": "make lint",
      "format_command": "make format",
      "install_command": "poetry install"
    },
    "key_files": {
      "main_pipeline": "src/videodub/core/pipeline.py",
      "legacy_pipeline": "src/videodub/core/pipeline.py",
      "alignment_service": "src/videodub/services/alignment.py",
      "translation_service": "src/videodub/services/translator.py",
      "optimized_translation": "src/videodub/services/optimized_translator.py",
      "configuration": "src/videodub/config/settings.py",
      "models": "src/videodub/core/models.py",
      "interfaces": "src/videodub/core/interfaces.py"
    },
    "documentation": {
      "architecture_decisions": {
        "location": "docs/adr/",
        "index": "docs/adr/README.md",
        "description": "Architecture Decision Records documenting key design decisions and their rationale",
        "key_adrs": [
          {
            "adr": "0001",
            "title": "Pipeline Architecture Design",
            "status": "Accepted",
            "relevance": "Core system architecture"
          },
          {
            "adr": "0002", 
            "title": "Real-Time Cost Tracking Integration",
            "status": "Accepted",
            "relevance": "Cost monitoring and analytics"
          },
          {
            "adr": "0003",
            "title": "Transcript Processing Service Redesign", 
            "status": "Superseded by ADR-0005",
            "relevance": "Step 2 implementation approach"
          },
          {
            "adr": "0004",
            "title": "Pipeline Step Evaluation Framework",
            "status": "Proposed",
            "relevance": "Quality evaluation and human assessment system"
          },
          {
            "adr": "0005",
            "title": "Pipeline Step Separation and Responsibility Alignment",
            "status": "In Progress - Phase 3 Complete",
            "relevance": "Fundamental pipeline architecture redesign"
          }
        ]
      },
      "evaluation_framework": {
        "location": "evaluation/",
        "implementation_guide": "evaluation/README.md",
        "description": "Pipeline step evaluation framework for quality assessment and human review",
        "status": "Phase 1 Complete",
        "usage": "poetry run python3 evaluation/scripts/run_evaluation.py --help",
        "implemented_steps": ["transcript_processing", "alignment"],
        "planned_steps": ["translation", "tts", "audio_processing"],
        "key_features": [
          "Human-readable before/after comparisons",
          "Configuration A/B testing",
          "Quality scoring and metrics",
          "Automated report generation",
          "Real service integration"
        ]
      },
      "testing_strategy": {
        "location": "docs/testing_strategy.md",
        "description": "Environment-adaptive testing strategy with CI/Local configurations",
        "status": "Complete",
        "key_features": [
          "Environment-adaptive testing (CI vs Local)",
          "Performance testing with realistic timing expectations",
          "Fast/slow test categorization for optimal CI usage"
        ],
        "commands": {
          "fast_tests": "make test-fast",
          "performance_fast": "make test-performance-fast",
          "all_tests": "make test"
        }
      }
    },
    "current_refactoring": {
      "status": "In Progress - ADR 0005 Implementation",
      "description": "Implementing pipeline step separation and responsibility alignment",
      "completed_phases": [
        {
          "phase": 1,
          "name": "Data Extraction Service Implementation",
          "status": "Complete",
          "deliverables": [
            "DataExtractionService interface (src/videodub/core/interfaces.py)",
            "YouTubeDataExtractionService implementation (src/videodub/services/data_extraction.py)",
            "TimedTranscript, TimingMetadata, SourceType models (src/videodub/core/models.py)",
            "DataExtractionError exception (src/videodub/core/exceptions.py)",
            "Comprehensive test suite (tests/unit/test_data_extraction.py)"
          ]
        },
        {
          "phase": 2,
          "name": "Translation Service Refactoring",
          "status": "Complete",
          "deliverables": [
            "Refactored TranslationService interface to pure text-to-text (src/videodub/core/interfaces.py)",
            "Updated OpenAITranslationService implementation (src/videodub/services/translator.py)",
            "Updated FallbackTranslationService implementation (src/videodub/services/translator.py)",
            "Removed all timing logic and segment-based methods",
            "Comprehensive test suite (tests/unit/test_translation_service.py)",
            "18 tests covering all functionality, edge cases, and interface compliance"
          ],
          "key_changes": [
            "translate_text(text: str, target_language: str) -> str",
            "translate_batch(texts: list[str], target_language: str) -> list[str]",
            "Removed translate_segments() and segment-based translate_batch()",
            "Clean separation: List[str] → TranslationService → List[str]"
          ]
        },
        {
          "phase": 3,
          "name": "Alignment Service Implementation",
          "status": "Complete",
          "deliverables": [
            "AlignmentService interface with A/B testing support (src/videodub/core/interfaces.py)",
            "TimingAlignmentService implementation (src/videodub/services/alignment.py)",
            "TimedTranslation, TimedTranslationSegment, AlignmentConfig, AlignmentEvaluation models (src/videodub/core/models.py)",
            "AlignmentStrategy enum with 5 strategies (LENGTH_BASED, SENTENCE_BOUNDARY, SEMANTIC_SIMILARITY, HYBRID, DYNAMIC_PROGRAMMING)",
            "AlignmentError exception (src/videodub/core/exceptions.py)",
            "TranslationPipeline with full integration (src/videodub/core/pipeline.py)",
            "Enhanced StorageService interface for new models (src/videodub/core/interfaces.py)",
            "Comprehensive test suite (tests/unit/test_alignment_service.py, tests/unit/test_pipeline.py)",
            "16 alignment tests + 8 pipeline integration tests covering all strategies and A/B testing"
          ],
          "key_changes": [
            "align_translation(TimedTranscript, List[str], target_language, AlignmentConfig) -> TimedTranslation",
            "evaluate_alignment() and compare_alignments() for A/B testing",
            "Multiple alignment strategies with configurable parameters",
            "Quality metrics: timing_accuracy, text_preservation, boundary_alignment, overall_score",
            "Integration with existing evaluation framework",
            "Clean data flow: TimedTranscript + List[str] → TimedTranslation"
          ],
          "a_b_testing_features": [
            "Multiple alignment strategy comparison in single run",
            "Automated quality scoring and ranking",
            "Execution time and confidence tracking",
            "Comprehensive evaluation metrics",
            "Integration with evaluation framework"
          ]
        },
        {
          "phase": 4,
          "name": "Integration Testing and Performance Optimization",
          "status": "Complete",
          "deliverables": [
            "Comprehensive integration test suite (tests/integration/)",
            "End-to-end pipeline integration tests (9 tests)",
            "Service integration tests (8 tests)",
            "Performance integration tests (10 tests)",
            "Performance optimization implementations (src/videodub/services/optimized_translator.py)",
            "Performance analysis documentation (docs/performance_analysis_phase4.md)",
            "Bottleneck identification and optimization strategies",
            "Concurrent processing optimizations"
          ],
          "performance_improvements": [
            "Translation batch optimization: 90% performance improvement",
            "Concurrent TTS generation: 2.4x speedup",
            "Pipeline throughput: 5.8 segments/second baseline",
            "Memory efficiency validation for large datasets",
            "Error handling performance under 1s",
            "Concurrent processing 3x faster than sequential"
          ],
          "test_coverage": [
            "Complete pipeline flow validation",
            "Service integration and data flow",
            "Error handling and recovery",
            "Performance benchmarking",
            "Memory usage optimization",
            "Concurrent processing validation"
          ]
        },
        {
          "phase": 5,
          "name": "Legacy Cleanup",
          "status": "Complete",
          "deliverables": [
            "Removed legacy models: ProcessedSegment, ProcessingMode, TranslationJob, AudioGenerationJob",
            "Removed legacy interfaces: VideoScrapingService, TranscriptProcessingService, TranscriptEnhancementService",
            "Updated TTSService interface to remove AudioGenerationJob dependency",
            "Updated TranslationPipeline to use new TTSService signature",
            "Cleaned up legacy imports in __init__.py",
            "Removed legacy test fixtures and test files",
            "Updated package exports to remove deprecated components"
          ],
          "cleanup_actions": [
            "Removed 4 legacy model classes from core/models.py",
            "Removed 3 legacy interface classes from core/interfaces.py", 
            "Updated TTSService.generate_batch_audio() method signature",
            "Removed legacy factory functions from __init__.py",
            "Removed test_transcript_processing.py test file",
            "Updated test fixtures to remove legacy dependencies",
            "Improved code maintainability by eliminating technical debt"
          ],
          "migration_impact": [
            "Legacy pipeline (TranslationPipeline) deprecated - use TranslationPipeline",
            "Legacy services (VideoScrapingService, TranscriptProcessingService) removed",
            "Legacy models removed - use new alignment-based models instead",
            "Test suite updated to focus on current architecture",
            "Package imports cleaned up - legacy components no longer exported"
          ]
        }
      ],
      "remaining_phases": [
        {
          "phase": 6,
          "name": "Migration",
          "description": "Migration of existing workflows to new pipeline",
          "status": "Pending"
        }
      ],
      "key_design_changes": {
        "old_pipeline": "video → transcription → translation → tts → audio → video",
        "new_pipeline": "video → data_extraction → translation → alignment → tts → audio → video",
        "rationale": "Clean separation between data extraction, translation, and timing alignment"
      }
    },
    "flow": [
      {
        "step": 1,
        "name": "Data Extraction",
        "component": "DataExtractionService",
        "file_path": "src/videodub/services/data_extraction.py",
        "implementation": "YouTubeDataExtractionService",
        "input": ["Video URL"],
        "output": ["TimedTranscript"],
        "description": "Extracts transcript and timing metadata from video sources (YouTube API, future: speech-to-text)",
        "status": "Implemented - Phase 1 Complete",
        "responsibility": "Extract all available data from video sources",
        "models": ["TimedTranscript", "TimingMetadata", "SourceType", "TranscriptSegment", "VideoMetadata"],
        "interface_methods": ["extract_from_url()", "extract_from_file()", "supports_source()"],
        "features": [
          "YouTube API integration",
          "Quality scoring and timing accuracy analysis", 
          "Source type detection",
          "Comprehensive validation",
          "Future: speech-to-text for raw video"
        ]
      },
      {
        "step": 2,
        "name": "Translation",
        "component": "TranslationService", 
        "file_path": "src/videodub/services/translator.py",
        "implementation": "OpenAITranslationService",
        "optimized_implementation": {
          "name": "OptimizedOpenAITranslationService",
          "file_path": "src/videodub/services/optimized_translator.py",
          "performance_improvements": "90% faster via batch processing",
          "use_case": "Large batch processing and production workloads"
        },
        "input": ["List[str] (extracted from TimedTranscript.segments)"],
        "output": ["List[str] (translated texts)"],
        "description": "Pure text-to-text translation using OpenAI GPT models",
        "status": "Implemented - Phase 2 Complete, Optimized - Phase 4 Complete",
        "responsibility": "Pure text translation with no timing or alignment concerns",
        "models_supported": ["gpt-3.5-turbo", "gpt-4", "gpt-4-turbo", "gpt-4.1-nano"],
        "interface_methods": ["translate_text()", "translate_batch()"],
        "implementations": {
          "standard": {
            "class": "OpenAITranslationService",
            "use_case": "Small batches, single translations, development",
            "characteristics": "Individual API calls, simpler implementation"
          },
          "optimized": {
            "class": "OptimizedOpenAITranslationService", 
            "use_case": "Large batches, production workloads, performance-critical",
            "characteristics": "Batch API calls, 90% performance improvement, configurable batch sizes"
          }
        },
        "features": [
          "Clean text input/output",
          "Concurrent batch processing", 
          "Error handling with fallbacks",
          "Language validation",
          "Focus solely on translation quality",
          "Performance-optimized variant available"
        ]
      },
      {
        "step": 3,
        "name": "Alignment",
        "component": "AlignmentService",
        "file_path": "src/videodub/services/alignment.py", 
        "implementation": "TimingAlignmentService",
        "input": ["TimedTranscript", "List[str] (translated texts)", "target_language", "AlignmentConfig"],
        "output": ["TimedTranslation"],
        "description": "Synchronizes translated text with original speech timing metadata using configurable alignment strategies",
        "status": "Implemented - Phase 3 Complete",
        "responsibility": "Synchronize translated text with original timing, handle segment length mismatches, apply speech timing optimization",
        "alignment_strategies": ["LENGTH_BASED", "SENTENCE_BOUNDARY", "SEMANTIC_SIMILARITY", "HYBRID", "DYNAMIC_PROGRAMMING"],
        "supported_strategies": ["LENGTH_BASED", "SENTENCE_BOUNDARY", "HYBRID"],
        "models": ["TimedTranslation", "TimedTranslationSegment", "AlignmentConfig", "AlignmentEvaluation", "AlignmentStrategy"],
        "interface_methods": ["align_translation()", "evaluate_alignment()", "compare_alignments()", "get_supported_strategies()"],
        "features": [
          "Multiple alignment strategies with A/B testing",
          "Quality scoring: timing_accuracy, text_preservation, boundary_alignment",
          "Confidence scoring per segment",
          "Execution time tracking",
          "Configurable strategy parameters",
          "Timing preservation and adjustment logic",
          "Comprehensive evaluation framework integration"
        ]
      },
      {
        "step": 4,
        "name": "Text-to-Speech",
        "component": "TTSService",
        "file_path": "src/videodub/services/tts.py",
        "implementation": "OpenAITTSService", 
        "input": ["TimedTranslation", "target_language"],
        "output": ["AudioFiles"],
        "description": "Generates natural-sounding audio from aligned translated segments using OpenAI TTS or other engines",
        "status": "Active - Integrated with new models",
        "responsibility": "Convert aligned translated text to speech audio files",
        "engines_supported": ["OpenAI", "Google", "Azure", "System"],
        "interface_methods": ["generate_audio()", "generate_batch_audio()", "get_supported_languages()", "get_supported_voices()"],
        "optimization_helpers": {
          "name": "ConcurrentTTSOptimizer",
          "file_path": "src/videodub/services/optimized_translator.py",
          "performance_improvements": "2.4x speedup via concurrent generation",
          "use_case": "Large audio batch generation"
        },
        "features": [
          "Support for TimedTranslation input",
          "Batch audio generation",
          "Multiple TTS engine support",
          "Voice selection and language support",
          "Concurrent optimization available (2.4x speedup)"
        ]
      },
      {
        "step": 5,
        "name": "Audio Processing",
        "component": "AudioProcessingService",
        "file_path": "src/videodub/services/audio.py",
        "implementation": "FFmpegAudioProcessingService",
        "input": ["AudioFiles", "TimedTranslation"],
        "output": ["CombinedAudioFile"], 
        "description": "Combines individual audio segments into a single synchronized audio track",
        "status": "Active - Enhanced for new timing models",
        "responsibility": "Synchronize and combine translated audio segments",
        "interface_methods": ["combine_audio_segments()", "adjust_audio_timing()"],
        "features": [
          "Timing-aware audio combination",
          "Audio synchronization with TimedTranslation",
          "FFmpeg-based processing"
        ]
      },
      {
        "step": 6,
        "name": "Video Dubbing",
        "component": "VideoProcessingService",
        "file_path": "src/videodub/services/video.py",
        "implementation": "FFmpegVideoProcessingService",
        "input": ["OriginalVideo", "CombinedAudioFile"],
        "output": ["DubbedVideo"],
        "description": "Creates final dubbed video by replacing original audio with translated audio using FFmpeg",
        "status": "Active",
        "responsibility": "Combine original video with translated audio track",
        "dependencies": ["ffmpeg"],
        "interface_methods": ["create_dubbed_video()", "extract_video_metadata()"],
        "features": [
          "Video-audio synchronization",
          "Multiple video format support",
          "Quality preservation"
        ]
      },
      {
        "step": 7,
        "name": "Storage & Result",
        "component": "StorageService",
        "file_path": "src/videodub/services/storage.py",
        "implementation": "StorageService", 
        "input": ["VideoMetadata", "TimedTranscript", "TimedTranslation", "AudioFiles", "DubbedVideo"],
        "output": ["ProcessingResult"],
        "description": "Saves all pipeline outputs and generates processing result with file paths",
        "status": "Enhanced - Phase 3 Complete",
        "responsibility": "Persist all pipeline data and generate comprehensive processing results",
        "enhanced_methods": [
          "save_timed_transcript()", 
          "save_timed_translation()", 
          "load_timed_transcript()", 
          "load_timed_translation()",
          "save_metadata()",
          "save_processing_result()"
        ],
        "features": [
          "Support for new alignment models",
          "Alignment evaluation storage", 
          "A/B testing result comparison",
          "Comprehensive file management",
          "Processing result generation"
        ]
      }
    ],
    "legacy_components": [
      {
        "name": "Video Scraping (Legacy)",
        "component": "VideoScrapingService",
        "file_path": "src/videodub/services/scraper.py",
        "implementation": "YouTubeScrapingService",
        "status": "Deprecated - Replaced by DataExtractionService",
        "migration_target": "DataExtractionService",
        "common_errors": ["Video not found", "No transcript available", "video_scraper package missing"]
      },
      {
        "name": "Transcript Processing (Legacy)",
        "component": "TranscriptProcessingService", 
        "file_path": "src/videodub/services/transcript.py",
        "implementation": "HybridTranscriptProcessingService",
        "status": "Deprecated - Logic redistributed to AlignmentService",
        "migration_target": "AlignmentService",
        "processing_modes": ["RULE_BASED", "AI_ENHANCED", "HYBRID"],
        "migration_notes": "Text enhancement logic moved to AlignmentService, timing logic preserved in new alignment strategies"
      }
    ],
    "pipeline_orchestration": {
      "description": "Pipeline orchestrators that coordinate the execution of multiple services in sequence",
      "implementations": [
        {
          "name": "TranslationPipeline",
          "file_path": "src/videodub/core/pipeline.py",
          "status": "Current - Phase 3 Complete",
          "description": "Modern pipeline orchestrator with AlignmentService integration and A/B testing support",
          "architecture": "video → data_extraction → translation → alignment → tts → audio → video",
          "key_methods": {
            "process_video()": "Standard video processing with single alignment strategy",
            "process_video_with_alignment_comparison()": "A/B testing with multiple alignment strategies for evaluation"
          },
          "services_orchestrated": [
            "DataExtractionService",
            "TranslationService", 
            "AlignmentService",
            "TTSService",
            "AudioProcessingService",
            "VideoProcessingService",
            "StorageService"
          ],
          "features": [
            "Clean service separation and dependency injection",
            "A/B testing with multiple alignment strategies",
            "Comprehensive error handling and logging",
            "Quality metrics and performance tracking",
            "Integration with cost tracking",
            "Alignment evaluation and comparison reports",
            "Configurable alignment strategies",
            "Automated best strategy selection"
          ],
          "input": ["Video URL", "AlignmentConfig (optional)"],
          "output": ["ProcessingResult with alignment evaluation"],
          "test_coverage": "8 comprehensive integration tests"
        },
        {
          "name": "TranslationPipeline",
          "file_path": "src/videodub/core/pipeline.py",
          "status": "Legacy - Pre-Phase 3",
          "description": "Original pipeline implementation using legacy architecture",
          "architecture": "video → scraping → transcript_processing → translation → tts → audio → video",
          "services_orchestrated": [
            "VideoScrapingService",
            "TranscriptProcessingService",
            "TranslationService",
            "TTSService",
            "AudioProcessingService", 
            "VideoProcessingService",
            "StorageService"
          ],
          "migration_notes": "Being replaced by TranslationPipeline in Phase 6"
        }
      ]
    },
    "performance_optimizations": {
      "description": "Phase 4 performance optimizations with dual implementation strategy",
      "design_rationale": {
        "dual_implementations": "Keep both standard and optimized implementations",
        "reasons": [
          "Backward compatibility with existing code and configurations",
          "Gradual migration path from standard to optimized services",
          "Fallback strategy if optimized versions encounter issues",
          "Different use cases: standard for development, optimized for production"
        ],
        "migration_strategy": "Phase 5 will evaluate replacing standard implementations"
      },
      "implementations": [
        {
          "service": "Translation",
          "standard": {
            "class": "OpenAITranslationService",
            "file": "src/videodub/services/translator.py",
            "best_for": "Development, small batches, simple use cases"
          },
          "optimized": {
            "class": "OptimizedOpenAITranslationService", 
            "file": "src/videodub/services/optimized_translator.py",
            "best_for": "Production, large batches, performance-critical workloads",
            "improvements": "90% performance improvement, 90% fewer API calls"
          }
        },
        {
          "service": "TTS",
          "standard": "Standard TTSService implementations",
          "optimization_helper": {
            "class": "ConcurrentTTSOptimizer",
            "file": "src/videodub/services/optimized_translator.py", 
            "best_for": "Large audio file generation",
            "improvements": "2.4x speedup via controlled concurrency"
          }
        }
      ]
    },
    "side_processes": [
      {
        "name": "Cost Tracking & Analytics",
        "file_path": "src/videodub/utils/cost_tracking.py",
        "implementation": "CostTracker",
        "triggered_after": "Translation",
        "monitored_steps": [
          "Translation API calls (OpenAI GPT)",
          "Text-to-Speech API calls",
          "Token usage tracking",
          "Character usage tracking",
          "Real-time cost calculation"
        ]
      }
    ]
  }
}